openapi: "3.0.2"
info:
  title: graphANNIS
  version: "1.0"
servers:
  - description: Your local developer service
    url: http://localhost:5711
security:
  - bearerAuth: []
paths:
  /corpora:
    get:
      tags:
        - corpora
      summary: Get a list of all corpora the user is authorized to use.
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorpusList"

  /search/count:
    post:
      tags:
        - search
      summary: Count the number of results for a query.
      requestBody:
        description: The definition of the query to execute.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountQuery"
      responses:
        "200":
          description: "The extended count result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountExtra"

  /search/find:
    post:
      tags:
        - search
      summary: Find results for a query and return the IDs of the matched nodes.
      requestBody:
        description: The definition of the query to execute.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindQuery"
      responses:
        "200":
          description: "The matches for the given query."
          content:
            text/plain:
              schema:
                type: string
                description: A textual representation of a list of matches. Each line describes a complete match. The single match is represented by the space-separated node IDs that matched.
                example: >
                  GUM/GUM_whow_skittles#tok_925 GUM/GUM_whow_skittles#tok_926
                  GUM/GUM_whow_skittles#tok_926 GUM/GUM_whow_skittles#tok_927

  /corpora/{corpus}/configuration:
    get:
      tags:
        - corpora
      summary: Get the corpus configuration object.
      description: The corpus configuration is created by the corpus authors to configure how the corpus should be displayed in query engines and visualizers.
      parameters:
        - name: corpus
          in: path
          description: The name of the corpus to get the configuration for.
          required: true
          example: "GUM"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorpusConfiguration"
        "404":
          description: "Corpus not found or access to corpus not allowed"

  /corpora/{corpus}/node_annotations:
    get:
      tags:
        - corpora
      summary: List all node annotations of the corpus.
      parameters:
        - name: corpus
          in: path
          description: The name of the corpus to get the configuration for.
          required: true
          example: "GUM"
          schema:
            type: string
        - name: list_values
          in: query
          description: If true, possible values are returned.
          schema:
            type: boolean
            default: false
        - name: only_most_frequent_values
          in: query
          description: If true, only the most frequent value per annotation is returned.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "The list of annotations"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Annotation"
        "404":
          description: "Corpus not found or access to corpus not allowed"

  /corpora/{corpus}/components:
    get:
      tags:
        - corpora
      summary: List all edge components of the corpus.
      parameters:
        - name: corpus
          in: path
          description: The name of the corpus to get the components for.
          required: true
          example: "GUM"
          schema:
            type: string
        - name: type
          in: query
          description: Only return components with this type.
          example: Dominance
          schema:
            type: string
        - name: name
          in: query
          description: Only return components with this name.
          example: edge
          schema:
            type: string
      responses:
        "200":
          description: "The list of components"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Component"
        "404":
          description: "Corpus not found or access to corpus not allowed"

  /corpora/{corpus}/edge_annotations/{type}/{layer}/{name}/:
    get:
      tags:
        - corpora
      summary: List all annotations of the corpus for a given edge component
      parameters:
        - name: corpus
          in: path
          description: The name of the corpus to get the configuration for.
          required: true
          example: "GUM"
          schema:
            type: string
        - name: type
          in: path
          description: The component type.
          required: true
          example: "Dominance"
          schema:
            type: string
        - name: layer
          in: path
          description: The component layer.
          required: true
          example: "const"
          schema:
            type: string
        - name: name
          in: path
          description: The component name.
          required: true
          example: "edge"
          schema:
            type: string

        - name: list_values
          in: query
          description: If true, possible values are returned.
          schema:
            type: boolean
            default: false
        - name: only_most_frequent_values
          in: query
          description: If true, only the most frequent value per annotation is returned.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "The list of annotations"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Annotation"
        "404":
          description: "Corpus not found or access to corpus not allowed"

  /corpora/{corpus}/files:
    get:
      tags:
        - corpora
      summary: Get an associated file for the corpus.
      description: >
        The annotation graph of a corpus can contain special nodes of the type "file", 
        which are connected to (sub-) corpus and document nodes with a `PartOf` relation.
        This endpoint allows to access the content of these file nodes.
        It supports [HTTP range requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests) 
        if you only need to access parts of the file.
      parameters:
        - name: corpus
          in: path
          description: The name of the corpus to get the configuration for.
          required: true
          example: "RIDGES_Herbology_Version9.0"
          schema:
            type: string
        - name: name
          in: query
          description: The name of the file node.
          required: true
          example: "RIDGES_Herbology_Version9.0/ridges_norm.config"
          schema:
            type: string
      responses:
        "200":
          description: "Returns the content of the requested file."
        "404":
          description: "Corpus or file not found."

  /local-login:
    post:
      summary: Create JWT token for credentials of a locally configured account.
      tags:
        - authentification
      requestBody:
        description: Object with the user ID and password to login with
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - password
              properties:
                user_id:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Returns a JSON Web Token (JWT), valid until its expiration time is reached.
          content:
            text/plain:
              schema:
                type: string
                description: JSON Web Token (JWT)
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZXhwIjoiMTU5MjE0NzE5NiIsImNvcnB1c19ncm91cHMiOlsiYWNhZGVtaWMiLCJpbnRlcm5hbCJdLCJhZG1pbiI6ZmFsc2V9._eVf-gPknBlqobOOB83p2bFjf0ws9-mkqb1UkM4rMRg"

        "401":
          description: Unauthorized
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CorpusList:
      description: List of corpus names/identifiers.
      type: array
      items:
        type: string
      example: [GUM, pcc2.1]

    QueryLanguage:
      type: string
      enum: [AQL, AQLQuirksV3]
      default: AQL

    CountQuery:
      type: object
      description: Query definition for counting matches.
      properties:
        query:
          type: string
          description: The query to execute.
          example: tok
        query_language:
          $ref: "#/components/schemas/QueryLanguage"
        corpora:
          $ref: "#/components/schemas/CorpusList"

    FindQuery:
      type: object
      description: Query definition to find matches
      properties:
        query:
          type: string
          description: The query to execute.
          example: tok
        query_language:
          $ref: "#/components/schemas/QueryLanguage"
        corpora:
          $ref: "#/components/schemas/CorpusList"
        limit:
          type: integer
          nullable: true
          default: null
          description: Return at most `n` matches, where `n` is the limit.  Use `null` to allow unlimited result sizes.
          example: 10
        offset:
          type: integer
          default: 0
          description: Skip the `n` first results, where `n` is the offset.

    CountExtra:
      type: object
      description: Contains the extended results of the count query.
      properties:
        match_count:
          type: integer
          description: Total number of matches.
          example: 79017
        document_count:
          type: integer
          description: Number of documents with at least one match.
          example: 230

    AnnoKey:
      description: Qualified name for annotation
      type: object
      properties:
        name:
          description: Name of the annotation.
          type: string
          example: pos
        ns:
          description: Namespace of the annotation.
          type: string
          example: stts

    Annotation:
      description: An annotation with a qualified name and a value.
      type: object
      properties:
        key:
          description: Qualified name or unique "key" for the annotation
          $ref: "#/components/schemas/AnnoKey"
        val:
          description: Value of the annotation
          type: string
          example: VVFIN

    Component:
      description: Definition of an edge component
      type: object
      properties:
        type:
          $ref: "#/components/schemas/AnnotationComponentType"
        name:
          description: Name of the component
          type: string
          example: dep
        layer:
          description: A layer name which allows to group different components into the same layer. Can be the empty string.
          type: string
          example: conll

    AnnotationComponentType:
      description: Type of component used for linguistic annotations.
      type: string
      enum:
        - Coverage
        - Dominance
        - Pointing
        - Ordering
        - LeftToken
        - RightToken
        - PartOf
      example: Pointing

    CorpusConfiguration:
      type: object
      properties:
        context:
          type: object
          description: Configuration for configuring context in subgraph queries.
          properties:
            default:
              type: integer
              description: The default context size.
            sizes:
              type: array
              description: Available context sizes to choose from.
              example: [1, 2, 5, 10]
            max:
              type: integer
              description: If set, a maximum context size which should be enforced by the query system.
              example: 25
            segmentation:
              type: string
              description: Default segmentation to use for defining the context, Set to null or omit it if tokens should be used.
        view:
          type: object
          description: Configuration how the results of a query should be shown
          properties:
            base_text_segmentation:
              type: string
              description: Default segmentation to use for the displaying the text, Set to null or omit it if tokens should be used.
            page_size:
              type: integer
              description: Default number of results to show at once for paginated queries.
              example: 10
        example_queries:
          type: array
          description: An array of example queries for the corpus with a description.
          items:
            $ref: "#/components/schemas/ExampleQuery"
        visualizers:
          type: array
          description: An array of rules which visualizers to show for the search results.
          items:
            $ref: "#/components/schemas/VisualizerRule"

    ExampleQuery:
      type: object
      properties:
        query:
          type: string
        description:
          type: string
        query_language:
          $ref: "#/components/schemas/QueryLanguage"

    VisualizerRule:
      type: object
      description: A rule when to trigger a visualizer for a specific result.
      properties:
        element:
          description: On which element type to trigger the visualizer on
          type: string
          enum: [node, edge]
        layer:
          description: >
            In which layer the element needs to be part of to trigger this visualizer. 
            Only relevant for edges, since only they are part of layers.
            If not given, elements of all layers trigger this visualization.
          type: string
        vis_type:
          description: The abstract type of visualization, e.g. "tree", "discourse", "grid", ...
          type: string
        display_name:
          description: A text displayed to the user describing this visualization
          type: string
        visibility:
          description: The default display state of the visualizer before any user interaction.
          type: string
          enum: [hidden, visible, permanent, preloaded, removed]
        mappings:
          description: Additional configuration given as generic map of key values to the visualizer.
          type: object
