use std::*;
use std::collections::VecDeque;
use super::ast;
use std::rc::Rc;

grammar;

pub Query : ast::Expr = {
    <c:Conjunction> => ast::Expr::Conjunction(c),
}

Conjunction : ast::Conjunction = {
    <terms:Term> <c:( "&" Term)?> => {
        let mut result = if let Some(c) = c {
            c.1
        } else {
            // create a new conjunction
            ast::Conjunction::default()
        };
        for t in terms {
            result.push_front(t);
        }
        return result;
    },
}

Term : VecDeque<ast::Term> = {
    NodeSearch => {let mut result = VecDeque::new(); result.push_front(<>); result},
    <lhs:Operand> <op:BinaryOpSpec> <rhs:Operand> <tail:(BinaryOpSpec Operand)*> => {
        let mut result : VecDeque<ast::Term> = VecDeque::new();
        result.push_front(ast::Term::BinaryOp(lhs.clone(), op, rhs.clone()));
        
        let mut last_operand = rhs.clone();
        for t in tail.into_iter() {
            result.push_front(ast::Term::BinaryOp(last_operand.clone(), t.0, t.1.clone()));
            last_operand = t.1;
        }

        return result;
    },
}

Operand : ast::Operand = {
    NodeRef => ast::Operand::NodeRef(<>),
    NodeSearch => ast::Operand::Term(Rc::from(<>)),
}

NodeSearch : ast::Term = {
    TextSearch => ast::Term::TokenSearch(<>),
    <name:QName> "=" <text:TextSearch> => ast::Term::AnnoSearch(name, Some(text)),
    QName =>  ast::Term::AnnoSearch(<>, None),
}


NodeRef : ast::NodeRef = {
    <v:r##"#[0-9]+"##> => ast::NodeRef::ID(v[1..].parse::<u32>().unwrap()),
    <v:r##"#[a-zA-Z][a-zA-Z0-9]*"##> => ast::NodeRef::Name(v[1..].to_string()),
}

BinaryOpSpec : ast::BinaryOpSpec = {
    ">" => ast::BinaryOpSpec::Dominance,
    "->" => ast::BinaryOpSpec::Pointing,
    "." => ast::BinaryOpSpec::Precedence,
    "_o_" => ast::BinaryOpSpec::Overlap,
    "_=_" => ast::BinaryOpSpec::IdenticalCoverage,
}

TextSearch: ast::TextSearch = {
    <v:r#""[^"]*""#> => ast::TextSearch(String::from(&v[1..v.len()-1]), ast::StringMatchType::Exact),
    // see https://stackoverflow.com/questions/37032620/regex-for-matching-a-string-literal-in-java 
    // for a example how to match escaped quotation characters
    <v:r#"/[^"\\]*(\\.[^"\\]*)*/"#> => ast::TextSearch(String::from(&v[1..v.len()-1]), ast::StringMatchType::Regex),
};

QName: ast::QName = {
    <ns:r"[a-zA-Z][a-zA-Z0-9]*"> ":" <name:r"[a-zA-Z][a-zA-Z0-9]*"> => ast::QName(Some(String::from(ns)), String::from(name)),
    <name:r"[a-zA-Z][a-zA-Z0-9]*"> => ast::QName(None, String::from(name)),
    
};


