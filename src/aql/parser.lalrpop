use std::*;
use super::ast;
use std::rc::Rc;

grammar;

pub Query : ast::Disjunction = {
    Disjunction => <>,
}

Disjunction : ast::Disjunction  = {
    <head:Conjunction> <tail:("|" Conjunction)*> => {
        let mut result = ast::Disjunction::new();
        for t in tail.into_iter() {
            result.push_front(t.1);
        }
        result.push_front(head);
        return result;
    },
}

Conjunction : ast::Conjunction = {
    <head:Factor> <tail:("&" Factor)*> => {
        let mut r = ast::Conjunction::new();
        for t in tail.into_iter() {
            for f in t.1.into_iter() {
                r.push_front(f);
            }
        }
        for f in head.into_iter() {
            r.push_front(f);
        }
        return r;
    },
}

Factor : Vec<ast::Factor> = {
    Literal => {
        let mut result = Vec::new();
        for l in <>.into_iter() {
            result.push(ast::Factor::Literal(l));
        }
        result
    },
    "(" <d:Disjunction> ")" => vec![ast::Factor::Disjunction(d)],
}

Literal : Vec<ast::Literal> = {
    NodeSearch => vec![<>],
    <start: @L> <lhs:Operand> <op:BinaryOpSpec> <rhs:Operand> <tail:(BinaryOpSpec Operand)*> <end: @R> => {
        let mut result : Vec<ast::Literal> = Vec::new();
        // TODO: can we get the position for each individual binary operator?
        let pos = ast::Pos {
            start, end
        };
        result.push(ast::Literal::BinaryOp{lhs: lhs.clone(), op, rhs: rhs.clone(), pos: Some(pos.clone())});
        
        let mut last_operand = rhs.clone();
        for t in tail.into_iter() {
            result.push(ast::Literal::BinaryOp{
                lhs: last_operand.clone(), 
                op: t.0, 
                rhs: t.1.clone(), 
                pos: Some(pos.clone())
            });
            last_operand = t.1;
        }

        return result;
    },
}

Operand : ast::Operand = {
    NodeRef => ast::Operand::NodeRef(<>),
    NodeSearch => ast::Operand::Literal(Rc::from(<>)),
}

NodeSearch : ast::Literal = {
    <l: @L> <val:TextSearch> <r:@R> => ast::Literal::TokenSearch{val, pos: Some(ast::Pos{start: l, end: r})},
    <l: @L> <name:QName> <r:@R>"=" <text:TextSearch> => ast::Literal::AnnoSearch{name, val: Some(text), pos: Some(ast::Pos{start: l, end: r})},
    <l: @L> <name:QName> <r:@R> =>  ast::Literal::AnnoSearch{name, val : None, pos: Some(ast::Pos{start: l, end: r})},
}


NodeRef : ast::NodeRef = {
    <v:r##"#[0-9]+"##> => ast::NodeRef::ID(v[1..].parse::<u32>().unwrap()),
    <v:r##"#[a-zA-Z][a-zA-Z0-9]*"##> => ast::NodeRef::Name(v[1..].to_string()),
}

BinaryOpSpec : ast::BinaryOpSpec = {
    ">" => ast::BinaryOpSpec::Dominance,
    "->" => ast::BinaryOpSpec::Pointing,
    "." => ast::BinaryOpSpec::Precedence,
    "_o_" => ast::BinaryOpSpec::Overlap,
    "_=_" => ast::BinaryOpSpec::IdenticalCoverage,
}

TextSearch: ast::TextSearch = {
    <v:r#""[^"]*""#> => ast::TextSearch(String::from(&v[1..v.len()-1]), ast::StringMatchType::Exact),
    // see https://stackoverflow.com/questions/37032620/regex-for-matching-a-string-literal-in-java 
    // for a example how to match escaped quotation characters
    <v:r#"/[^"\\]*(\\.[^"\\]*)*/"#> => ast::TextSearch(String::from(&v[1..v.len()-1]), ast::StringMatchType::Regex),
};

QName: ast::QName = {
    <ns:r"[a-zA-Z][a-zA-Z0-9]*"> ":" <name:r"[a-zA-Z][a-zA-Z0-9]*"> => ast::QName(Some(String::from(ns)), String::from(name)),
    <name:r"[a-zA-Z][a-zA-Z0-9]*"> => ast::QName(None, String::from(name)),
    
};


