// Targeted by JavaCPP version 1.2.4: DO NOT EDIT THIS FILE

package org.corpus_tools.graphannis;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class API extends org.corpus_tools.graphannis.info.AnnisApiInfo {
    static { Loader.load(); }

@Name("std::vector<std::string>") public static class StringVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StringVector(Pointer p) { super(p); }
    public StringVector(BytePointer ... array) { this(array.length); put(array); }
    public StringVector(String ... array) { this(array.length); put(array); }
    public StringVector()       { allocate();  }
    public StringVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef StringVector put(@ByRef StringVector x);

    public native long size();
    public native void resize(@Cast("size_t") long n);

    @Index public native @StdString BytePointer get(@Cast("size_t") long i);
    public native StringVector put(@Cast("size_t") long i, BytePointer value);
    @ValueSetter @Index public native StringVector put(@Cast("size_t") long i, @StdString String value);

    public StringVector put(BytePointer ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }

    public StringVector put(String ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

// Parsed from annis/types.h

// #pragma once

// #include <cstdint>
// #include <string>
// #include <cstring>
// #include <limits>
// #include <unordered_map>

// #include <tuple>

  @Namespace("annis") @MemberGetter public static native @StdString BytePointer annis_ns();
  @Namespace("annis") @MemberGetter public static native @StdString BytePointer annis_node_name();
  @Namespace("annis") @MemberGetter public static native @StdString BytePointer annis_tok();

  @Namespace("annis") @MemberGetter public static native @Cast("const unsigned int") int uintmax();

  @Namespace("annis") public static class Edge extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public Edge() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public Edge(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Edge(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public Edge position(long position) {
          return (Edge)super.position(position);
      }
  
    public native @Cast("annis::nodeid_t") long source(); public native Edge source(long source);
    public native @Cast("annis::nodeid_t") long target(); public native Edge target(long target);
  }

  @Namespace("annis") public static native @Cast("bool") @Name("operator <") boolean lessThan(@Const @ByRef Edge a, @Const @ByRef Edge b);

  /** enum class annis::ComponentType */
  public static final int COVERAGE = 0,
                            INVERSE_COVERAGE = 1,
                            DOMINANCE = 2,
                            POINTING = 3,
                            ORDERING = 4,
                            LEFT_TOKEN = 5,
                            RIGHT_TOKEN = 6,
                            ComponentType_MAX = 7;

  @Namespace("annis") public static class ComponentTypeHelper extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public ComponentTypeHelper() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public ComponentTypeHelper(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public ComponentTypeHelper(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public ComponentTypeHelper position(long position) {
          return (ComponentTypeHelper)super.position(position);
      }
  
    public static native @StdString BytePointer toString(@Cast("const annis::ComponentType") int type);
/*
    static ComponentType fromString(const std::string& typeAsString)
    {
      for(unsigned int t = (unsigned int)ComponentType::COVERAGE; t < (unsigned int) ComponentType::ComponentType_MAX; t++)
      {
        if(toString((ComponentType) t) == typeAsString)
        {
          return (ComponentType) t;
        }
      }
      return ComponentType::ComponentType_MAX;
    }
*/
  }

  @Namespace("annis") public static class Component extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public Component() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public Component(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Component(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public Component position(long position) {
          return (Component)super.position(position);
      }
  
    public native @Cast("annis::ComponentType") int type(); public native Component type(int type);
    public native @StdString BytePointer layer(); public native Component layer(BytePointer layer);
    public native @StdString BytePointer name(); public native Component name(BytePointer name);
  }
  @Namespace("annis") public static native @Cast("bool") @Name("operator <") boolean lessThan(@Const @ByRef Component a, @Const @ByRef Component b);

  @Namespace("annis") public static class AnnotationKey extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public AnnotationKey() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public AnnotationKey(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public AnnotationKey(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public AnnotationKey position(long position) {
          return (AnnotationKey)super.position(position);
      }
  
    public native long name(); public native AnnotationKey name(long name);
    public native long ns(); public native AnnotationKey ns(long ns);
  }


  @Namespace("annis") public static native @Cast("bool") @Name("operator <") boolean lessThan(@Const @ByRef AnnotationKey a,  @Const @ByRef AnnotationKey b);

  @Namespace("annis") public static class Annotation extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public Annotation() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public Annotation(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Annotation(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public Annotation position(long position) {
          return (Annotation)super.position(position);
      }
  
    public native long name(); public native Annotation name(long name);
    public native long ns(); public native Annotation ns(long ns);
    public native long val(); public native Annotation val(long val);
  }

  @Namespace("annis") public static native @Cast("bool") @Name("operator <") boolean lessThan(@Const @ByRef Annotation a,  @Const @ByRef Annotation b);

  @Namespace("annis") public static native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef Annotation lhs, @Const @ByRef Annotation rhs);

  @Namespace("annis") public static class NodeAnnotationKey extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public NodeAnnotationKey() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public NodeAnnotationKey(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public NodeAnnotationKey(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public NodeAnnotationKey position(long position) {
          return (NodeAnnotationKey)super.position(position);
      }
  
    public native @Cast("annis::nodeid_t") long node(); public native NodeAnnotationKey node(long node);
    public native long anno_name(); public native NodeAnnotationKey anno_name(long anno_name);
    public native long anno_ns(); public native NodeAnnotationKey anno_ns(long anno_ns);
  }

  @Namespace("annis") public static native @Cast("bool") @Name("operator <") boolean lessThan(@Const @ByRef NodeAnnotationKey a,  @Const @ByRef NodeAnnotationKey b);

  @Namespace("annis") public static class TextProperty extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public TextProperty() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public TextProperty(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public TextProperty(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public TextProperty position(long position) {
          return (TextProperty)super.position(position);
      }
  
    public native long corpusID(); public native TextProperty corpusID(long corpusID);
    public native long textID(); public native TextProperty textID(long textID);
    public native long val(); public native TextProperty val(long val);
  }
  @Namespace("annis") public static native @Cast("bool") @Name("operator <") boolean lessThan(@Const @ByRef TextProperty a, @Const @ByRef TextProperty b);



  /** combines a node ID and the matched annotation */
  @Namespace("annis") public static class Match extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public Match() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public Match(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Match(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public Match position(long position) {
          return (Match)super.position(position);
      }
  
//    bool found;
    public native @Cast("annis::nodeid_t") long node(); public native Match node(long node);
    public native @ByRef Annotation anno(); public native Match anno(Annotation anno);
  }

  /** Some general statistical numbers specific to a graph component */
  @Namespace("annis") public static class GraphStatistic extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public GraphStatistic() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public GraphStatistic(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public GraphStatistic(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public GraphStatistic position(long position) {
          return (GraphStatistic)super.position(position);
      }
  

    /** Flag to indicate whether the statistics was set */
    public native @Cast("bool") boolean valid(); public native GraphStatistic valid(boolean valid);

    public native @Cast("bool") boolean cyclic(); public native GraphStatistic cyclic(boolean cyclic);
    public native @Cast("bool") boolean rootedTree(); public native GraphStatistic rootedTree(boolean rootedTree);

    /** number of nodes */
    public native long nodes(); public native GraphStatistic nodes(long nodes);

    /** Average fan out  */
    public native double avgFanOut(); public native GraphStatistic avgFanOut(double avgFanOut);
    /** maximal number of children of a node */
    public native long maxFanOut(); public native GraphStatistic maxFanOut(long maxFanOut);
    /** maximum length from a root node to a terminal node */
    public native long maxDepth(); public native GraphStatistic maxDepth(long maxDepth);

    /** only for acyclic graphs: the average number of times a DFS will visit each node */
    public native double dfsVisitRatio(); public native GraphStatistic dfsVisitRatio(double dfsVisitRatio);
  }

 // end namespace annis

 // end namespace std



// Parsed from annis/api/search.h

// #pragma once

// #include <memory>
// #include <vector>
// #include <list>

// #include <annis/db.h>
// #include <annis/dbcache.h>
// #include <annis/json/jsonqueryparser.h>
/**
 * An API for searching in a corpus.
 */
@Namespace("annis::api") @NoOffset public static class Search extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Search(Pointer p) { super(p); }


  public static class CountResult extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public CountResult() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public CountResult(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public CountResult(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public CountResult position(long position) {
          return (CountResult)super.position(position);
      }
  
    public native long matchCount(); public native CountResult matchCount(long matchCount);
    public native long documentCount(); public native CountResult documentCount(long documentCount);
  }

  public Search(@StdString BytePointer databaseDir) { super((Pointer)null); allocate(databaseDir); }
  private native void allocate(@StdString BytePointer databaseDir);
  public Search(@StdString String databaseDir) { super((Pointer)null); allocate(databaseDir); }
  private native void allocate(@StdString String databaseDir);

  /**
   * Count all occurrences of an AQL query in a single corpus.
   *
   * @param corpus
   * @param queryAsJSON
   * @return
   */
  public native long count(@ByVal StringVector corpora,
                    @StdString BytePointer queryAsJSON);
  public native long count(@ByVal StringVector corpora,
                    @StdString String queryAsJSON);


  /**
   * Count all occurrences of an AQL query in a single corpus.
   *
   * @param corpus
   * @param queryAsJSON
   * @return
   */
  public native @ByVal CountResult countExtra(@ByVal StringVector corpora,
                    @StdString BytePointer queryAsJSON);
  public native @ByVal CountResult countExtra(@ByVal StringVector corpora,
                    @StdString String queryAsJSON);


  /**
   * Find occurrences of an AQL query in a single corpus.
   * @param corpora
   * @param queryAsJSON
   * @param offset
   * @param limit
   * @return
   */
  public native @ByVal StringVector find(@ByVal StringVector corpora, @StdString BytePointer queryAsJSON, long offset/*=0*/, long limit/*=10*/);
  public native @ByVal StringVector find(@ByVal StringVector corpora, @StdString BytePointer queryAsJSON);
  public native @ByVal StringVector find(@ByVal StringVector corpora, @StdString String queryAsJSON, long offset/*=0*/, long limit/*=10*/);
  public native @ByVal StringVector find(@ByVal StringVector corpora, @StdString String queryAsJSON);
}

 // end namespace annis


// Parsed from annis/api/admin.h

// #pragma once

// #include <string>
  @Namespace("annis::api") public static class Admin extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Admin(Pointer p) { super(p); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public Admin(long size) { super((Pointer)null); allocateArray(size); }
      private native void allocateArray(long size);
      @Override public Admin position(long position) {
          return (Admin)super.position(position);
      }
  
    public Admin() { super((Pointer)null); allocate(); }
    private native void allocate();

    /**
    * Imports data in the relANNIS format to the internal format used by graphANNIS.
    * @param sourceFolder
    * @param targetFolder
    */
   public static native void importRelANNIS(@StdString BytePointer sourceFolder, @StdString BytePointer targetFolder);
   public static native void importRelANNIS(@StdString String sourceFolder, @StdString String targetFolder);
  }
 // end namespace annis::api


}
