language: rust
rust:
  - stable

cache:
  directories:
    - $TRAVIS_HOME/.cache/sccache
    - $TRAVIS_HOME/.cargo/
    - $TRAVIS_HOME/.rustup/
    - relannis
    - data

jobs:
  include:
    - os: linux
    # Execute search tests only on linux
    - os: linux
      env: TEST_SUITE=--ignored
    - os: osx
    # Use MSVC toolchain on windows
    - os: windows
      rust: stable-x86_64-pc-windows-msvc

before_cache:
  - rm -rf "$TRAVIS_HOME/.cargo/registry/src"

branches:
  only:
    # Release tags
    - /^v\d+\.\d+\.\d+.*$/
    # Develop branch
    - develop
    # used when testing the release process
    # - /^test-release-process.*$/

before_script:
  - rustup component add rustfmt
  - export SHORT_VERSION=`echo ${TRAVIS_TAG:-develop} | sed -E 's/(\.[0-9]+)$//'`
  - misc/download-mdbook.sh 0.3.5
  # Build in release mode if search tests are executed
  - if [[ "$TEST_SUITE" = "--ignored" ]]; then export BUILD_FLAGS="--release" ; fi
  - echo "Building with flags \"$BUILD_FLAGS\""

script:
  - cargo fmt -- --check
  # Build all sub-crates with all features
  - cargo build $BUILD_FLAGS --all-features
  # Download and import test corpora if necessary
  - (test -z "$TEST_SUITE" -o \( -d relannis/GUM/ -a -d relannis/pcc2.1/ \) || "./misc/download-test-corpora.sh")
  - (test -z "$TEST_SUITE" -o -d data/GUM || ./target/release/annis data --cmd 'import relannis/GUM')
  - (test -z "$TEST_SUITE" -o -d data/pcc2.1 || ./target/release/annis data --cmd 'import relannis/pcc2.1')
  - cargo test --all-features $BUILD_FLAGS -- $TEST_SUITE
  # generate the documentation (for testing if it works and later deploy)
  - mdbook build --dest-dir book/${SHORT_VERSION} docs/

before_deploy:
  # recreate release binary after testing
  - cargo build --release --all-features
  # rename the binary files
  - bash $TRAVIS_BUILD_DIR/misc/rename-deployed-files.sh
  # determine which binary files to deploy
  - export LIBRARY_FILE=target/release/libgraphannis.so
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export LIBRARY_FILE=target/release/libgraphannis.dylib ; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then export LIBRARY_FILE=target/release/graphannis.dll ; fi
  - export CLI_FILE=target/release/annis
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export CLI_FILE=target/release/annis.osx ; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then export CLI_FILE=target/release/annis.exe ; fi
  - export REST_FILE=target/release/graphannis-webservice
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export REST_FILE=target/release/graphannis-webservice.osx ; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then export REST_FILE=target/release/graphannis-webservice.exe ; fi

deploy:
  - provider: releases
    api_key:
      secure: FyOCVablsxCiORudaeXHR1f7j39gT5DUUGaeE/YtBdgdQEw1YzDBdkZx/puDHfrh8zM4uovYR+TX9aIlt/XlW9TSRmY9HVPIH6llfBr/Ap/e9R6o+cux04vuF+ozG/aU9i2HsTq8a0XELumGj2Gl6qffO2iRysBWMcnrPr+BXo3+qypUKCiR9aYWG8H0iw7pPT2jikXcIEPhiY+XCXKxb7QO7hp9Kz42rVBJKhxAbrJKZ6WQVouFfhuOcf+o1jDHloTge6LmWw7QdTffm/O3yjAeLk2BZr/TUy/6SDD1mRXBiSY3Zjkfps1aigFGLdbaJG29Cqvesix+Hf3m+0ISSZyB3T6sIKaA8eWAPN1VeWTwl+f7Fscp30xcvQR2+i8EbazQiAjFqwNXQfC7GsOCLNVytYJuWEj9fT96xDYi8BBk60JA1SUrImr2ZNqubLT9KnOYS3E7px+T1qc88tK5mKZZTwIuYGPNha/CjMklKZtnanpOn9SViQg4b9SyEUxTXxCuH3AdtCufyMR6plECbiwRnXJW7yQzcdN9XH7ajBqjSPgQdM0nD4rpCWwpQ9aV7MwpLc5gjXhOK8jSXikoCgmoij1KL8YRc8cIY0eH1WlOxkeC9LLhEid/n2/wmT2u57vDXapY2PpGnbWk+I3MAHHdvJBZgvZ7Q+KFu5ImaTA=
    file_glob: true
    file:
      - "${LIBRARY_FILE}"
      - "${CLI_FILE}"
      - "${REST_FILE}"
    on:
      repo: korpling/graphANNIS
      branch: master
      tags: true
      condition: $TEST_SUITE == ""
    skip_cleanup: true
    tag_name: $TRAVIS_TAG
    draft: true
  - provider: script
    script: bash $TRAVIS_BUILD_DIR/misc/deploy-docs.sh
    on:
      repo: korpling/graphANNIS
      branch: master
      tags: true
      condition: $TRAVIS_OS_NAME == "linux" && $TEST_SUITE == ""
    skip-cleanup: true
