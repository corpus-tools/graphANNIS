language: rust
rust:
  - stable

cache:
  directories:
    - $TRAVIS_HOME/.cache/sccache
    - $TRAVIS_HOME/.cargo/
    - $TRAVIS_HOME/.rustup/
    - target
    - relannis
    - data

jobs:
  include:
    - os: linux
    # Execute search tests only on linux
    - os: linux
      env: TEST_SUITE=--ignored
    - os: osx
    # Use MSVC toolchain on windows
    - os: windows
      rust: stable-x86_64-pc-windows-msvc
 
before_cache:
  - rm -rf "$TRAVIS_HOME/.cargo/registry/src"

branches:
  only:
    # Release tags
    - /^v\d+\.\d+\.\d+.*$/
    # Develop branch
    - develop
    # used when testing the release process
    # - /^test-release-process.*$/

before_script:
  - rustup component add rustfmt
  - export SHORT_VERSION=`echo ${TRAVIS_TAG:-develop} | sed -E 's/(\.[0-9]+)$//'`
  - misc/download-mdbook.sh 0.3.5
  # Build in release mode if search tests are executed
  - if [[ "$TEST_SUITE" = "--ignored" ]]; then export BUILD_FLAGS="--release" ; fi
  - echo "Building with flags \"$BUILD_FLAGS\""


script:
  - cargo fmt -- --check
  # Build all sub-crates with all features
  - cargo build $BUILD_FLAGS --all-features
  # Download and import test corpora if necessary
  - (test -z "$TEST_SUITE" -o \( -d relannis/GUM/ -a -d relannis/pcc2.1/ \) || "./misc/download-test-corpora.sh")
  - (test -z "$TEST_SUITE" -o -d data/GUM || ./target/release/annis data --cmd 'import relannis/GUM')
  - (test -z "$TEST_SUITE" -o -d data/pcc2.1 || ./target/release/annis data --cmd 'import relannis/pcc2.1')
  - cargo test --all-features $BUILD_FLAGS -- $TEST_SUITE
  # generate the documentation (for testing if it works and later deploy)
  - mdbook build --dest-dir book/${SHORT_VERSION} docs/
  

before_deploy:
  # recreate release binary after testing
  - cargo build --release --all-features --lib
  # rename the binary file
  -  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then mv target/release/libgraphannis_capi.so target/release/libgraphannis.so ; fi
  -  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then mv target/release/libgraphannis_capi.dylib target/release/libgraphannis.dylib ; fi
  -  if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then mv target/release/graphannis_capi.dll target/release/graphannis.dll ; fi
  # determine which binary to deploy
  - export RELEASE_PKG_FILE=target/release/libgraphannis.so
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export RELEASE_PKG_FILE=target/release/libgraphannis.dylib ; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then export RELEASE_PKG_FILE=target/release/graphannis.dll ; fi


deploy:
  - provider: releases
    api_key:
      secure: "VZxMx6T27LnD2Y8PIXzSMuTE+bfBRo+FyxEyZ/tcDwWYttcU9fNtHuD96sIooNifdup1aiW4hMYkOfjGEqMhzymJIflT+rWms4EmljxTG45XJivooak+oe2T4wQvELBSH3ejmQxD5Zyvjn/i3ifOIbpJAMVPqSwjkHSnyXwWk2ARX35XIpa40XLi1T3fsrQmeH4JAFSdlCnsF6AelacwwbwtPudZHnTh795oIBEnAtihcmKClLCE8OV7pP8kaDISvHoKsHly5wmBTzxpQh7P8srIRCQjYxU/e4LBlS8NiIcz1h5ca9htV3wZKbJgoOIGiVB+FsCRJtdwGmk6IiF8pB6D8A3mI+EUxcJvmFKIzc83IcqulPs3S0XrsdwHT7TA/uBScOBhbLbx1VtU8lhMvfGKdo74Jx2NU9XeaNr+ptM0ewMxqL3zjITKjEDsO1OrLbcGnpCfswSfFV+TgLHw7wEOdRbRzWSdhROFUEZ2tW6GIfFVwtrLUPXs2ikW5H/8Ja/QV2v0joHqLbGvMZD13RpiRJdziQQANQPsfs8i59B7zrrP7/BwRr9lLP8kABIZ/e2bHGZJJH57jmt/QR5Aa445L/K5g1uC0vLcj7epUVcHcgiZakW1ZNX8o8fCOLJKkO9xB9qEKH6KfdZc09+yxdEsTs1w7HBYuE0LqRuvdek="
    file_glob: true
    file: "${RELEASE_PKG_FILE}"
    on:
      repo: korpling/graphANNIS
      branch: master
      tags: true
      condition: $TEST_SUITE == ""
    skip_cleanup: true
    tag_name: $TRAVIS_TAG
    draft: true
  - provider: script
    script: bash $TRAVIS_BUILD_DIR/misc/deploy-docs.sh
    on:
      repo: korpling/graphANNIS
      branch: master
      tags: true
      condition: $TRAVIS_OS_NAME == "linux" && $TEST_SUITE == ""
    skip-cleanup: true
      
